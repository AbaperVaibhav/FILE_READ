*&---------------------------------------------------------------------*
*& Report ZZZZZ1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZZZZZ1.

* Type definitions for Excel data
TYPES: BEGIN OF ty_excel,
         plnnr                TYPE plnnr,                  " Group
         plnal                TYPE plnal,                  " Group Counter
         plnfl                TYPE plnfolge,              " Sequence
         vornr                TYPE vornr,                  " Operation/Activity Number
         bom_type             TYPE stlty,                  " BOM Category
         matnr_root           TYPE matnr,                  " Material Number (Root)
         werks_root           TYPE werks_d,                " Plant (Root)
         alternative_bom_root TYPE stlal,                  " Alternative BOM (Root)
         matnr_hdr            TYPE matnr,                  " Material Number (Header)
         alternative_bom_hdr  TYPE stlal,                  " Alternative BOM (Header)
         itmid                TYPE stlkn,                  " Item ID
         posnr                TYPE posnr,                  " BOM Item Number
         postp                TYPE postp,                  " Item Category
         idnrk                TYPE idnrk,                  " Component
         ktext_component      TYPE ktext,                  " Component Description
         rgekz                TYPE rgekz,                  " Backflush Indicator
         datuv                TYPE datuv,                  " Valid From Date
       END OF ty_excel.

* Type for error logging
TYPES: BEGIN OF ty_log,
         row     TYPE i,
         message TYPE string,
       END OF ty_log.

* Data declarations
DATA: lt_excel                  TYPE TABLE OF ty_excel,
      ls_excel                  TYPE ty_excel,
      lt_log                    TYPE TABLE OF ty_log,
      ls_log                    TYPE ty_log,
      lt_intern                 TYPE TABLE OF alsmex_tabline,
      ls_intern                 TYPE alsmex_tabline,
      LV_file                   TYPE rlgrap-filename,
      lv_group                  TYPE plnnr,
      lv_groupcounter           TYPE plnal,
      lt_task                   TYPE TABLE OF bapi1012_tsk_c,
      ls_task                   TYPE bapi1012_tsk_c,
      lt_materialtaskallocation TYPE TABLE OF bapi1012_mtk_c,
      ls_materialtaskallocation TYPE bapi1012_mtk_c,
      lt_operations             TYPE TABLE OF bapi1012_opr_c,
      ls_operations             TYPE bapi1012_opr_c,
      lt_components             TYPE TABLE OF bapi1012_com_c,
      ls_components             TYPE bapi1012_com_c,
      lt_return                 TYPE TABLE OF bapiret2,
      ls_return                 TYPE bapiret2.

* Selection screen
PARAMETERS: p_file TYPE rlgrap-filename OBLIGATORY.
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      program_name  = syst-cprog
      dynpro_number = syst-dynnr
      field_name    = 'P_FILE'
    IMPORTING
      file_name     = p_file.

START-OF-SELECTION.
  lv_file = p_file.

* Read XLSX file using ALSM_EXCEL_TO_INTERNAL_TABLE
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = lv_file
      i_begin_row             = 2
      i_begin_col             = 1
      i_end_row               = 59
      i_end_col               = 18
    TABLES
      intern                  = lt_intern
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
    MESSAGE 'Error reading XLSX file' TYPE 'E'.
    RETURN.
  ENDIF.

* Map internal table to lt_excel
  CLEAR lt_excel.
  DATA: lv_current_row TYPE i VALUE 0.
  LOOP AT lt_intern INTO ls_intern.
    IF ls_intern-row <> lv_current_row.  " New row
      IF ls_excel IS NOT INITIAL.
        APPEND ls_excel TO lt_excel.
        CLEAR ls_excel.
      ENDIF.
      lv_current_row = ls_intern-row.
    ENDIF.
    CASE ls_intern-col.
      WHEN 1.  ls_excel-plnnr                = ls_intern-value.
      WHEN 2.  ls_excel-plnal                = ls_intern-value.
      WHEN 3.  ls_excel-plnfl                = ls_intern-value.
      WHEN 4.  ls_excel-vornr                = ls_intern-value.
      WHEN 5.  ls_excel-bom_type             = ls_intern-value.
      WHEN 6.  ls_excel-matnr_root           = ls_intern-value.
      WHEN 7.  ls_excel-werks_root           = ls_intern-value.
      WHEN 8.  ls_excel-alternative_bom_root = ls_intern-value.
      WHEN 9.  ls_excel-matnr_hdr            = ls_intern-value.
      WHEN 10. ls_excel-alternative_bom_hdr  = ls_intern-value.
      WHEN 11. ls_excel-itmid                = ls_intern-value.
      WHEN 12. ls_excel-posnr                = ls_intern-value.
      WHEN 13. ls_excel-postp                = ls_intern-value.
      WHEN 14. ls_excel-idnrk                = ls_intern-value.
      WHEN 15. ls_excel-ktext_component      = ls_intern-value.
      WHEN 16. ls_excel-rgekz                = ls_intern-value.
      WHEN 17. ls_excel-datuv                = ls_intern-value.
    ENDCASE.
*  ENDLOOP.
  IF ls_excel IS NOT INITIAL.
    APPEND ls_excel TO lt_excel.  " Append last row
  ENDIF.

* Process Excel data
*  LOOP AT lt_excel INTO ls_excel.
    CLEAR: ls_task, ls_materialtaskallocation, ls_operations, ls_components, lt_return.

* Validate mandatory fields
    IF ls_excel-plnnr IS INITIAL OR ls_excel-matnr_root IS INITIAL OR ls_excel-werks_root IS INITIAL.
      ls_log-row = sy-tabix + 1.
      ls_log-message = |Missing mandatory fields for PLNNR={ ls_excel-plnnr }|.
      APPEND ls_log TO lt_log.
      CONTINUE.
    ENDIF.

* Prepare task data (PLKO)
    ls_task-task_list_group = 'N'.                     " Routing
    ls_task-task_list_usage = ls_excel-bom_type.     " BOM Usage (e.g., 'M')
    ls_task-plant = ls_excel-werks_root.             " WERKS_ROOT (e.g., 'RDZA')
    ls_task-task_list_status = '4'.                  " Released
    IF ls_excel-datuv IS NOT INITIAL.
      ls_task-valid_from = ls_excel-datuv.           " DATUV
    ELSE.
      ls_task-valid_from = sy-datum.                 " System date
    ENDIF.
    ls_task-task_list_group = ls_excel-plnnr.        " PLNNR (e.g., '40000100')
    ls_task-group_counter = ls_excel-plnal.          " PLNAL (e.g., '01')
    APPEND ls_task TO lt_task.

* Prepare material task allocation
    ls_materialtaskallocation-material = ls_excel-matnr_root.  " MATNR_ROOT (e.g., 'E72-FH03')
    ls_materialtaskallocation-plant = ls_excel-werks_root.     " WERKS_ROOT (e.g., 'RDZA')
    IF ls_excel-datuv IS NOT INITIAL.
      ls_materialtaskallocation-valid_from = ls_excel-datuv.   " DATUV
    ELSE.
      ls_materialtaskallocation-valid_from = sy-datum.         " System date
    ENDIF.
*    ls_materialtaskallocation-bom_usage = ls_excel-bom_type.   " BOM Usage (e.g., 'M')
    APPEND ls_materialtaskallocation TO lt_materialtaskallocation.

* Prepare operation data (PLPO)
    ls_operations-activity = ls_excel-vornr.          " VORNR (e.g., '0020')
    ls_operations-plant = ls_excel-werks_root.        " WERKS_ROOT (e.g., 'RDZA')
    ls_operations-control_key = 'PP01'.               " Standard production
    IF ls_excel-datuv IS NOT INITIAL.
      ls_operations-valid_from = ls_excel-datuv.      " DATUV
    ELSE.
      ls_operations-valid_from = sy-datum.            " System date
    ENDIF.
    APPEND ls_operations TO lt_operations.

* Prepare component data (PLMZ)
    ls_components-bom_type = ls_excel-bom_type.       " BOM Category (e.g., 'M')
    ls_components-material = ls_excel-idnrk.          " Component (e.g., '90332-FK1')
    ls_components-item_no = ls_excel-posnr.           " BOM Item Number (e.g., '0020')
    ls_components-item_id = ls_excel-itmid.           " Item ID (e.g., 'A0000002')
    ls_components-backflush = ls_excel-rgekz.         " Backflush (e.g., 'X')
    ls_components-plant = ls_excel-werks_root.        " Plant (e.g., 'RDZA')
    IF ls_excel-datuv IS NOT INITIAL.
      ls_components-valid_from = ls_excel-datuv.      " DATUV
    ELSE.
      ls_components-valid_from = sy-datum.            " System date
    ENDIF.
    ls_components-alternative_bom = ls_excel-alternative_bom_root.  " Alternative BOM (e.g., '01')
    APPEND ls_components TO lt_components.
 ENDLOOP.

* Call BAPI to create/update routing
CALL FUNCTION 'ROUTING_MAINTAIN'
* EXPORTING
*   CHANGE_NO                          =
*   KEY_DATE                           =
*   TASK_LIST_GROUP                    =
*   GROUP_COUNTER                      =
*   MATERIAL                           =
*   PLANT                              =
*   TASK                               =
*   TASK_X                             =
*   APPLICATION                        =
*   BOM_USAGE                          =
  TABLES
*   MATERIAL_TASK_ALLOCATIONS          =
*   MATERIAL_TASK_ALLOCATIONS_X        =
*   SEQUENCES                          =
*   SEQUENCES_X                        =
*   OPERATIONS                         =
*   OPERATIONS_X                       =
*   SUBOPERATIONS                      =
*   SUBOPERATIONS_X                    =
*   PRODUCTION_RESOURCES_TOOLS         =
*   PRODUCTION_RESOURCES_TOOLS_X       =
*   COMPONENT_ALLOCATIONS              =
*   COMPONENT_ALLOCATIONS_X            =
*   INSPECTION_CHARACTERISTICS         =
*   INSPECTION_CHARACTERISTICS_X       =
*   INSPECTION_VALUES                  =
*   INSPECTION_VALUES_X                =
*   REFERENCED_OPERATIONS              =
*   TEXT                               =
*   TEXT_ALLOCATIONS                   =
    return                             =
   SEGMENT_TASK_MAINTAIN              = lt_return
          .

    CALL FUNCTION 'BAPI_ROUTING_CREATE'
      EXPORTING
        testrun                  = ''  " Empty for update mode
        profile                  = 'SAP1'  " Standard profile
        bomusage                 = '1'     " Production
        application              = 'PP01'  " Production planning
      IMPORTING
        group                    = lv_group
        groupcounter             = lv_groupcounter
      TABLES
        task                     = lt_task
        materialtaskallocation   = lt_materialtaskallocation
        operation                = lt_operations
        componentallocation      = lt_components
        return                   = lt_return.

* Check BAPI return messages
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      ls_log-row = sy-tabix + 1.
      ls_log-message = |BAPI error for PLNNR={ ls_excel-plnnr }: { ls_return-message }|.
      APPEND ls_log TO lt_log.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ELSE.
* Commit changes
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.

* Clear tables for next iteration
    CLEAR: lt_task, lt_materialtaskallocation, lt_operations, lt_components.

* Display log
  IF lt_log IS INITIAL.
    MESSAGE 'All records processed successfully' TYPE 'S'.
  ELSE.
    LOOP AT lt_log INTO ls_log.
      WRITE: / ls_log-row, ls_log-message.
    ENDLOOP.
  ENDIF.
